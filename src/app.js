//////////////////////////////////////////
//                                      //
//          III6 LifeAnd.Eth            //
//          stereoIII6.eth              //
//          stereodocbush@gmail.com     //
//                                      //
//////////////////////////////////////////
import { ethers, VoidSigner, Wallet } from "ethers";
import detectEthereumProvider from "@metamask/detect-provider";
import "../public/app.scss";
import { sha256 } from "crypto-hash";
import UAuth from "@uauth/js";
import { toUtf8CodePoints } from "@ethersproject/strings";
import { sortedIndex } from "underscore";
import { create as ipfsHttpClient } from "ipfs-http-client";
import { Buffer } from "buffer";
let accounts;
let network;
let words;

const getWords = async () => {
  words = await fetch("./words/words.json")
    .then((response) => response.json())
    .then((json) => {
      words = json;
      return words;
    });
};
words = getWords();
let user;
let aa = 0;
const projectId = "2E7kMR0TPtUcbgHMJOdJqUlCAkD";
const projectSecret = "4521c0699f3423a82430c762af3cb06a";
const auth = `Basic ${Buffer.from(`${projectId}:${projectSecret}`).toString("base64")}`;
const cliento = ipfsHttpClient({
  host: "ipfs.infura.io",
  port: 5001,
  protocol: "https",
  headers: {
    authorization: auth,
  },
});
const uauth = new UAuth({
  clientID: "101df3a0-41df-4c22-8edf-0cf4db92a61c",
  redirectUri: "http://127.0.0.1:5000/callback",
});
uauth
  .user()
  .then((user) => {
    // user exists
    console.log("User information:", user);
  })
  .catch(() => {
    // user does not exist
  });

const s0xFactory = require("../dist/contracts/s0xFactory.json");
const Trees = require("../dist/contracts/Trees.json");
const CO2 = require("../dist/contracts/Co2s.json");
const GardenPool = require("../dist/contracts/GardenPool.json");
const IERC20 = require("../dist/contracts/IERC20.json");
const USDC = require("../dist/contracts/USDC.json");
const MLQ = require("../dist/contracts/MLQ.json");
const ecoverse = require("../dist/contracts/ecoverse.json");
let provider = new ethers.providers.Web3Provider(window.ethereum);
let signer;

// const wallet = new Wallet(process.env.PKEY, provider);
// links & buttons
const lines = document.getElementsByClassName("bars");
const goWest = document.getElementById("goWest");
const goEast = document.getElementById("goEast");
const modal = document.getElementById("modal-stage");
const modalHead = document.getElementById("modal-header");
const modalBody = document.getElementById("modal-body");
const modalFoot = document.getElementById("modal-footer");
const label = document.getElementById("label-stage");
const labelhead = document.getElementById("label-header");
const labelbody = document.getElementById("label-body");
const labelfoot = document.getElementById("label-footer");
const cover = document.getElementById("cover");
const close = document.getElementById("close");
const actions = document.getElementById("act_inf");

const buyTrees = document.getElementById("trees");
buyTrees.style.display = "none";
const plantTrees = document.getElementById("plant");
plantTrees.style.display = "none";
const mintCarbonds = document.getElementById("co2");
mintCarbonds.style.display = "none";
const usdcBtn = document.getElementById("usdc_bal");
usdcBtn.style.display = "none";
const treeBtn = document.getElementById("tree_bal");
treeBtn.style.display = "none";
const plntBtn = document.getElementById("plnt_bal");
plntBtn.style.display = "none";
const co2Btn = document.getElementById("co2_bal");
co2Btn.style.display = "none";

let a;
let move = true;
let trees;
let co2;
let garden;
let s0x;
let usdc;
let userData = {};

const africa = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
  [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
  [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
  [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];

const draw = (e) => {
  let i = 0;
  // console.log(lines.length);
  while (i < lines.length) {
    // console.log(lines[i].id);
    let j = 0;
    while (j < 60) {
      // lines[i].children[j].style.opacity = africa[i][j + a];
      if (africa[i][j + aa] === 0) {
        lines[i].children[j].style.background = "#badbe1";
        lines[i].children[j].style.border = "1px solid #4c8690";
      } else if (africa[i][j + aa] === 1) {
        lines[i].children[j].style.background = "#4c9071";
        lines[i].children[j].style.border = "0px solid #4c9071";
      }
      lines[i].children[j].addEventListener("click", labelMe);
      j++;
    }
    i++;
  }
};
let mod = "none";
const toggle = (e) => {
  console.log(mod);
  if (mod === "none") {
    mod = "flex";
    close.addEventListener("click", unlabelMe);
  } else mod = "none";
  modal.style.display = mod;
};

let lab = "grid";
const labelMe = (e) => {
  lab = "grid";
  label.style.display = lab;
  label.position = "absolute";
  labelhead.innerHTML = "Ecoverse Geoxel";
  labelbody.innerHTML = "<div style='grid-row: 3; grid-column: 1/-1; text-align: center;'>LANDMARK CONTENT COMING SOON ...</div>";
  labelfoot.innerHTML = `${-6 * (Number(e.target.parentNode.id.slice(-2)) - 31)}° ${Number(e.target.parentNode.id.slice(-2)) - 31 < 0 ? "North" : "South"} / ${Number(e.target.id.slice(-2)) + aa < 91 ? (Number(e.target.id.slice(-2)) + aa) * 4 : (Number(e.target.id.slice(-2)) + aa - 91) * 4}° from GMT`;
  label.addEventListener("click", unlabelMe);
};
const unlabelMe = (e) => {
  lab = "none";
  mod = "none";
  label.style.display = lab;
  modal.style.display = lab;
};

const goProfile = (e) => {
  e.preventDefault();
};
const rotate = () => {
  if (aa === 91) aa = 0;
  if (move === true) aa++;
  draw();
};
setInterval(rotate, 250);
const pause = (e) => {
  e.preventDefault();
  move = false;
};
const conti = (e) => {
  e.preventDefault();
  move = true;
};
cover.addEventListener("mouseover", pause);
cover.addEventListener("mouseout", conti);

const netSwitch = (e) => {
  e.preventDefault();
  console.log("open switch");
  modalHead.innerHTML = "Switch Network";
  modalBody.innerHTML = document.getElementById("switchNetDef").innerHTML;
  modalFoot.innerHTML = "* Your data will be stored on the blockchain !";
  // const getFuji = document.getElementById("avaxFuji");
  // const getAvax = document.getElementById("avax");
  const getMumbai = document.getElementById("polygonMumbai");
  const getPoly = document.getElementById("polygon");

  const goFuji = async () => {
    const change = await ethereum.request({
      method: "wallet_addEthereumChain",
      params: [
        {
          chainId: "0xA869",
          chainName: "Avalanche Testnet C-Chain",
          nativeCurrency: {
            name: "Avalanche Fuji",
            symbol: "AVAX",
            decimals: 18, //In number form
          },
          rpcUrls: ["https://api.avax-test.network/ext/bc/C/rpc"],
          blockExplorerUrls: ["https://testnet.snowtrace.io/"],
        },
      ],
    });
    netSwap(e);
  };
  const goAvax = async () => {
    const change = await ethereum.request({
      method: "wallet_addEthereumChain",
      params: [
        {
          chainId: "0xA86A",
          chainName: "Avalanche Testnet C-Chain",
          nativeCurrency: {
            name: "Avalanche",
            symbol: "AVAX",
            decimals: 18, //In number form
          },
          rpcUrls: ["https://api.avax-test.network/ext/bc/C/rpc"],
          blockExplorerUrls: ["https://testnet.snowtrace.io/"],
        },
      ],
    });
    netSwap(e);
  };
  const goMumbai = async () => {
    const change = await ethereum.request({
      method: "wallet_addEthereumChain",
      params: [
        {
          chainId: "0x13881",
          chainName: "Polygon Mumbai",
          nativeCurrency: {
            name: "Polygon Mumbai",
            symbol: "MATIC",
            decimals: 18, //In number form
          },
          rpcUrls: ["https://polygon-testnet.public.blastapi.io"],
          blockExplorerUrls: ["https://mumbai.polygonscan.com"],
        },
      ],
    });
    netSwap(e);
  };
  const goPoly = async () => {
    const change = await ethereum.request({
      method: "wallet_addEthereumChain",
      params: [
        {
          chainId: "0x89",
          chainName: "Polygon",
          nativeCurrency: {
            name: "Polygon",
            symbol: "MATIC",
            decimals: 18, //In number form
          },
          rpcUrls: ["https://polygon-mainnet.public.blastapi.io"],
          blockExplorerUrls: ["https://polygonscan.com"],
        },
      ],
    });
    netSwap(e);
  };
  // getFuji.addEventListener("click", goFuji);
  // getAvax.addEventListener("click", goAvax);
  getMumbai.addEventListener("click", goMumbai);
  getPoly.addEventListener("click", goPoly);
  toggle();
};
const netSwap = async (e) => {
  console.log("swapped network");
  toggle();
  provider = new ethers.providers.Web3Provider(window.ethereum);
  accounts = await ethereum.request({ method: "eth_requestAccounts" });
  await provider.send("eth_requestAccounts", []);
  signer = await provider.getSigner();
  network = await ethereum.request({ method: "net_version" });
  await onClickConnect(e);
};
const onClickConnect = async (e) => {
  e.preventDefault();
  try {
    // set label for profile button
    console.log("connecting");
    profile_btn.innerHTML = "connecting";
    // set eventlistener for profile button
    profile_btn.removeEventListener("click", onClickConnect);
    profile_btn.addEventListener("click", goProfile);
    // get wallet address and account data of client and store in main state accounts
    accounts = await ethereum.request({ method: "eth_requestAccounts" });
    await provider.send("eth_requestAccounts", []);
    signer = await provider.getSigner();
    // get network data
    network = await ethereum.request({ method: "net_version" });

    var networkTag = "Switch Network";
    // evaluate legal networks
    if (Number(network) === 1) {
      networkTag = "ETH";
      // a = 0;
    }
    if (Number(network) === 10) {
      networkTag = "oETH";
      // a = 1;
    }
    if (Number(network) === 69) {
      networkTag = "okETH*";
      // a = 3;
    }
    if (Number(network) === 100) {
      networkTag = "xDai";
      // a = 4;
    }
    if (Number(network) === 137) {
      networkTag = "MTC";
      // a = 0; // a = 5;
    }
    if (Number(network) === 200) {
      networkTag = "axETH";
      // a = 6;
    }
    if (Number(network) === 250) {
      networkTag = "FTM";
      // a = 7;
    }
    if (Number(network) === 300) {
      networkTag = "oxETH*";
      // a = 8;
    }
    if (Number(network) === 420) {
      networkTag = "ogETH*";
      // a = 0; // a = 9;
    }
    if (Number(network) === 1312) {
      networkTag = "ACAB_";
      // a = 10;
    }
    if (Number(network) === 4002) {
      networkTag = "FTM*";
      // a = 0; // a = 11;
    }
    if (Number(network) === 5777) {
      networkTag = "DEV*";
      a = 0; // a = 12;
    }
    if (Number(network) === 9000) {
      networkTag = "EVMOS*";
      // a = 0; // a = 13;
    }
    if (Number(network) === 9001) {
      networkTag = "EVMOS";
      // a = 0; // a = 14;
    }
    if (Number(network) === 42161) {
      networkTag = "aETH";
      // a = 15;
    }
    if (Number(network) === 43113) {
      networkTag = "AVAX*";
      // a = 1; // a = 16;
    }
    if (Number(network) === 43224) {
      networkTag = "AVAX";
      a = 1; // a = 17;
    }
    if (Number(network) === 80001) {
      networkTag = "MTC*";
      a = 2; // a = 18;
    }
    console.log("net check : ", network, a);
    let mainVal = await provider.getBalance(accounts[0]);
    net_btn.innerHTML = Number(mainVal / 1e18).toFixed(2) + " " + networkTag;
    net_btn.addEventListener("click", netSwitch);
    userData = await log();
  } catch (error) {
    console.error("connect error", error);
    profile_btn.innerText = error.data.message.split(": ")[1];
  }
};
let trs;
let isApproved = false;
const approveUSDC = async (e) => {
  e.preventDefault();
  console.log(signer.getAddress());
  const usdc = await usdcData();
  const trees = await treeData();

  const deploymentKey = await Object.keys(Trees.networks)[a];

  const doApprove = await usdc
    .approve(trees.address, BigInt(trs * 94 * 1e15))
    .then((result) => {
      console.log(result);
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
  doApprove.wait().then((result) => {
    console.log(result);
    const approve = document.getElementById("approve");
    approve.style.gridColumn = "1";
    approve.innerHTML = "√";
    const treebuy = document.getElementById("treebuy");
    treebuy.style.gridColumn = "2 / -1";
  });
};
const approveMLQ = async (e) => {
  e.preventDefault();
  console.log(signer.getAddress());
  const trees = await treeData();
  console.log(BigInt(trs * 94));
  const doApprove = await trees
    .approveUSDC(BigInt(trs * 94 * 1e15))
    .then((result) => {
      console.log(result);
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
};
const refreshUSDC = async () => {
  const client = await signer.getAddress();
  const usdc = await usdcData();
  let usdcVal = await usdc.balanceOf(client);
  if (Number(usdcVal._hex) > 0) {
    usdcBtn.style.display = "block";
    buyTrees.style.display = "block";
    usdcBtn.innerHTML = (Number(usdcVal._hex) / 1e18).toFixed(2) + " USDC";
    actions.innerHTML = "Get S33Ds to start a plantation !";
    console.log("$ refresh", actions, Number(usdcVal._hex));
  } else {
    usdcBtn.style.display = "block";
    usdcBtn.innerHTML = "GET $";
    actions.innerHTML = "Get S33Ds to start a plantation !";
    console.log("$ refresh", actions);
  }
};
const refreshTR33 = async () => {
  const client = await signer.getAddress();
  const tree = await treeData();
  let treeVal = await tree.balanceOf(client);
  if (Number(treeVal._hex) > 0.1) {
    treeBtn.style.display = "block";
    plantTrees.style.display = "block";
    actions.innerHTML = "Start planting !";
    console.log("tree refresh", actions);
  } else {
    treeBtn.style.display = "none";
    plantTrees.style.display = "none";
    actions.innerHTML = "Start planting !";
    console.log("tree refresh", actions);
  }
  treeBtn.innerHTML = (Number(treeVal._hex) / 1e18).toFixed(0) + " S33Ds";
};
const refreshECO = async () => {
  const client = await signer.getAddress();
  const eco = await ecoData();
  let ecoVal = await eco.balanceOf(client);
  if (Number(ecoVal._hex) > 0) {
    treeBtn.style.display = "block";
    plantTrees.style.display = "block";
    plntBtn.innerHTML = Number(ecoVal._hex) + " PCRTs";
    plntBtn.style.display = "block";
    actions.innerHTML = "You just have to wait for your C4RBs !";
    console.log("eco refresh", actions, Number(ecoVal._hex));
  } else {
    treeBtn.style.display = "none";
    plantTrees.style.display = "none";
    plntBtn.style.display = "none";
    actions.innerHTML = "Start planting !";
    console.log("eco refresh", actions, Number(ecoVal._hex));
  }
};
const refreshNet = async () => {
  const client = await signer.getAddress();
  // network = await ethereum.request({ method: "net_version" });
  var networkTag = "Switch Network";
  // evaluate legal networks
  if (Number(network) === 1) networkTag = "ETH";
  if (Number(network) === 80001) networkTag = "MTC*";
  if (Number(network) === 100) networkTag = "xDai";
  if (Number(network) === 10) networkTag = "oETH";
  if (Number(network) === 200) networkTag = "aETH";
  if (Number(network) === 43224) networkTag = "AVAX";
  if (Number(network) === 1312) networkTag = "ACAB_";
  if (Number(network) === 137) networkTag = "MTC";
  if (Number(network) === 43113) networkTag = "AVAX*";
  let mainVal = await provider.getBalance(accounts[0]);
  if (Number(mainVal._hex / 1e18).toFixed(2) > 0) {
    buyTrees.style.display = "block";
    actions.innerHTML = "Get S33Ds to start a plantation !";
    console.log("net refresh", actions);
  } else {
    actions.innerHTML = "You need " + networkTag + "to pay GAS for all interactions!";
    actions.style.gridRow = "2";
    console.log("net refresh", actions);
  }

  net_btn.innerHTML = Number(mainVal / 1e18).toFixed(2) + " " + networkTag;
  net_btn.addEventListener("click", netSwitch);
};
const dropUSDCs = async (e) => {
  e.preventDefault();
  const usdc = await usdcData();
  const drop = await usdc
    .dropUSDC()
    .then((result) => {
      console.log(result);
      usdcBtn.innerHTML = "XXX USDCs";
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
  const dropped = drop
    .wait()
    .then((result) => {
      console.log(result);
      refreshUSDC();
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
};
usdcBtn.addEventListener("click", dropUSDCs);
const goUsdBuy = async (e) => {
  e.preventDefault();
  const trees = await treeData();
  const amnt = trs;
  const sender = await signer.getAddress();
  console.log(amnt, sender);
  const usdc = await usdcData();
  const balance = await usdc.balanceOf(await signer.getAddress());
  console.log(Number(balance._hex));
  console.log(amnt * 94 * 1e15);
  console.log(trees.address);
  const buy = await trees
    .buyTreeUSDC(amnt, sender)
    .then((result) => {
      console.log(result);
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
  buy.wait().then((result) => {
    console.log(result);
    refreshTR33();
    refreshUSDC();
    toggle();
  });
};
const grabTrees = async (e) => {
  trs = 101;
  e.preventDefault();
  try {
    console.log("open modal !");
    const usdc = await usdcData();
    const trees = await treeData();
    const client = await signer.getAddress();
    const allowed = await usdc.allowance(client, trees.address);
    const usdcBalance = await usdc.balanceOf(client);
    const usdcAlwd = document.getElementById("usdcalwd");
    const usdcMax = document.getElementById("maxusdc");
    usdcAlwd.innerHTML = (Number(allowed._hex) / 1e18).toFixed(2) + " USDC";
    usdcMax.innerHTML = "Approve Max. " + (Number(usdcBalance._hex) / 1e18).toFixed(2) + " USDC";
    toggle();
    console.log("allowed : ", allowed);
    modalHead.innerHTML = "BUY TR33 TOKENS";
    modalBody.innerHTML = document.getElementById("buyTreesDef").innerHTML;
    const sub = document.getElementById("sub");
    const amnt = document.getElementById("amnt");
    const add = document.getElementById("add");
    const tenx = document.getElementById("tenx");
    const div = document.getElementById("div");
    const approve = document.getElementById("approve");
    const treebuy = document.getElementById("treebuy");
    amnt.innerHTML = `${trs} S33Ds`;
    if (allowed >= BigInt(trs * 94 * 1e15)) {
      approve.innerHTML = `√`;
      approve.style.gridColumn = "1";
      treebuy.style.gridColumn = "2/-1";
      treebuy.innerHTML = `BUY ${trs} S33Ds`;
    } else {
      amnt.innerHTML = `${trs} TR33S`;
      approve.innerHTML = `APPROVE ${(trs * 0.094).toFixed(3)} USDC`;
      treebuy.innerHTML = `BUY ${trs} TR33S`;
    }
    const more = (e) => {
      trs++;
      amnt.innerHTML = `${trs} TR33S`;
      approve.innerHTML = `APPROVE ${(trs * 0.094).toFixed(3)} USDC`;
      treebuy.innerHTML = `BUY ${trs} TR33S`;
      console.log(trs);
    };
    add.addEventListener("click", more);

    const tenxy = (e) => {
      if (trs < 1000000000) trs *= 10;
      amnt.innerHTML = `${trs} TR33S`;
      approve.innerHTML = `APPROVE ${(trs * 0.094).toFixed(3)} USDC`;
      treebuy.innerHTML = `BUY ${trs} TR33S`;
      console.log(trs);
    };
    tenx.addEventListener("click", tenxy);

    const less = (e) => {
      if (trs > 2) {
        trs--;
        amnt.innerHTML = `${trs} TR33S`;
        approve.innerHTML = `APPROVE ${(trs * 0.094).toFixed(3)} USDC`;
        treebuy.innerHTML = `BUY ${trs} TR33S`;
        console.log(trs);
      }
    };
    sub.addEventListener("click", less);

    const divx = (e) => {
      if (trs >= 10) {
        trs = Math.floor(trs / 10);
        amnt.innerHTML = `${trs} TR33S`;
        approve.innerHTML = `APPROVE ${(trs * 0.094).toFixed(3)} USDC`;
        treebuy.innerHTML = `BUY ${trs} TR33S`;
        console.log(trs.toFixed(0));
      }
    };
    div.addEventListener("click", divx);
    approve.addEventListener("click", approveUSDC);
    // if (isApproved === true)
    treebuy.addEventListener("click", goUsdBuy);
    modalFoot.innerHTML = "* confirm your transaction with your metamask !";
    close.addEventListener("click", unlabelMe);
  } catch {
    modalHead.innerHTML = "Please Sign In first";
    modalBody.innerHTML = "";
    modalFoot.innerHTML = "* Your have to be connected to the blockchain !";
    toggle();
  }
};
buyTrees.addEventListener("click", grabTrees);

const s0xData = async () => {
  console.log("net check :: ", network, a);
  const deploymentKey = await Object.keys(s0xFactory.networks)[a];
  return new ethers.Contract(s0xFactory.networks[deploymentKey].address, s0xFactory.abi, signer);
};
const usdcData = async () => {
  let adr;
  let client = await signer.getAddress();
  console.log("net check :: ", network, "client check :: ", client);
  /* AVAX* */ if (Number(network) === 43113) adr = "0x5a604d07782b7303bd2327d133f13a58bd17dc43"; // Fuji AVAX*
  /* AVAX */ if (Number(network) === 43224) adr = "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e"; // Main AVAX
  /* MTC* */ if (Number(network) === 80001) adr = "0xCfA542b644F8FfA46e79d88cF4E7347E49aD2ddc"; // Mumbai Polygon*
  /* MTC */ if (Number(network) === 137) adr = "0x2791bca1f2de4661ed88a30c99a7a9449aa84174"; // Main Polygon

  return new ethers.Contract(adr, USDC.abi, signer);
};
const mlqData = async () => {
  const deploymentKey = await Object.keys(MLQ.networks)[a];
  // console.log(Trees.abi);

  return new ethers.Contract(MLQ.networks[deploymentKey].address, MLQ.abi, signer);
};
const treeData = async () => {
  const deploymentKey = await Object.keys(Trees.networks)[a];
  console.log(Trees.abi, a, deploymentKey, Trees.networks[deploymentKey].address, signer);

  return new ethers.Contract(Trees.networks[deploymentKey].address, Trees.abi, signer);
};
const co2Data = async () => {
  const deploymentKey = await Object.keys(CO2.networks)[a];
  // console.log(CO2.abi);

  return new ethers.Contract(CO2.networks[deploymentKey].address, CO2.abi, signer);
};
const gardenData = async () => {
  const deploymentKey = await Object.keys(GardenPool.networks)[a];
  // console.log(GardenPool.abi);

  return new ethers.Contract(GardenPool.networks[deploymentKey].address, GardenPool.abi, signer);
};
const ecoData = async () => {
  const deploymentKey = await Object.keys(ecoverse.networks)[a];
  // console.log(GardenPool.abi);

  return new ethers.Contract(ecoverse.networks[deploymentKey].address, ecoverse.abi, signer);
};
let num1;
let num2;
let num3;
let num4;
const doRand = () => {
  num1 = Math.floor(Math.random() * words.names.length);
  num2 = Math.floor(Math.random() * words.verbs.length);
  num3 = Math.floor(Math.random() * words.adjectives.length);
  num4 = Math.floor(Math.random() * words.nouns.length);
  // console.log(num1, num2, num3, num4);
  return [num1, num2, num3, num4];
};
let dias = {
  owner: "0x0",
  location: "",
  trees: 0,
  date: 0,
  dias: {},
};
const setDias = async () => {
  const tree = await treeData();
  const client = await signer.getAddress();
  const eco = await ecoData();

  const deploymentKey = await Object.keys(ecoverse.networks)[a];
  const diasShow = document.getElementById("dias");
  const allowed = await tree
    .allowance(client, ecoverse.networks[deploymentKey].address)
    .then((result) => {
      console.log(Number(result._hex));
      return Number(result._hex);
    })
    .catch((err) => {
      console.log(err);
    });
  const bePlanter = document.getElementById("bePlanter");
  const approveTrees = document.getElementById("approveTrees");
  if (allowed >= BigInt(dias.trees * 1e18) && dias.location !== "") {
    bePlanter.innerHTML = "Plant " + dias.trees + " TR33s Now";
    bePlanter.style.background = "#4c9071";
    bePlanter.disabled = false;
    bePlanter.style.display = "block";
    approveTrees.style.display = "none";
  } else {
    bePlanter.style.background = "#badbe1";
    bePlanter.disabled = true;

    dias.date = Date(Date.now()).slice(4, 34);
    diasShow.innerHTML = JSON.stringify(dias);
    const approveTrees = document.getElementById("approveTrees");
    if (dias.location !== "" && dias.trees > allowed) {
      approveTrees.disabled = false;
      approveTrees.style.display = "block";
      bePlanter.style.display = "none";
      approveTrees.innerHTML = "Approve " + dias.trees + " TR33s";
      approveTrees.style.background = "#4c9071";
    } else {
      approveTrees.disabled = true;
      approveTrees.style.background = "#badbe1";
    }
  }
};
const goPlantForm = async (e) => {
  e.preventDefault();
  const eco = await ecoData();
  const trees = await treeData();
  const client = await signer.getAddress();
  let adrs = await signer.getAddress();
  dias.owner = adrs.slice(0, 4) + "..." + adrs.slice(39, 42);
  dias.date = Date(Date.now()).slice(4, 34);
  dias.dias = { status: "sprouting" };
  const bePlanter = document.getElementById("bePlanter");
  const approveTrees = document.getElementById("approveTrees");

  const deploymentKey = await Object.keys(ecoverse.networks)[a];
  const allowed = await trees.allowance(client, ecoverse.networks[deploymentKey].address);
  if (allowed <= BigInt(dias.trees * 1e18)) bePlanter.style.display = "none";
  else approveTrees.style.display = "none";
  const tree = await treeData();
  const doMax = async (e) => {
    e.preventDefault();
    let treeVal = await tree.balanceOf(client);
    console.log((treeVal / 1e18).toFixed(0));
    const treeBalance = document.getElementById("treebalance");
    treeBalance.value = (treeVal / 1e18).toFixed(0);
    onTrees();
  };
  const onTrees = async () => {
    const treeBalance = document.getElementById("treebalance");
    dias.trees = treeBalance.value;
    setDias();
  };
  const setPlantation = async (e) => {
    const gaziNorth = document.getElementById("gazi-north");
    const gaziSouth = document.getElementById("gazi-south");
    const loc = document.getElementById("location");
    console.log("go green", e.target.id);
    if (e.target.id === "gazi-north") {
      gaziNorth.style.background = "#4c9071";
      gaziSouth.style.background = "#badbe1";
      loc.innerHTML = "Your Plantation : Gazi North, Kenya";
      dias.location = "Gazi North, Kenya";
    } else if (e.target.id === "gazi-south") {
      gaziNorth.style.background = "#badbe1";
      gaziSouth.style.background = "#4c9071";
      loc.innerHTML = "Your Plantation : Gazi South, Kenya";
      dias.location = "Gazi South, Kenya";
    }
    setDias();
  };
  const goApproveTrees = async () => {
    const eco = await ecoData();
    const trees = await treeData();

    const deploymentKey = await Object.keys(ecoverse.networks)[a];
    const approveTrees = document.getElementById("approveTrees");
    const bePlanter = document.getElementById("bePlanter");
    const allowed = await trees.allowance(client, ecoverse.networks[deploymentKey].address);
    if (allowed <= BigInt(dias.trees * 1e18)) bePlanter.style.display = "none";
    else approveTrees.style.display = "none";
    const aprv = await trees
      .approve(ecoverse.networks[deploymentKey].address, BigInt(dias.trees * 1e18))
      .then((result) => {
        console.log(result);
        approveTrees.innerHTML = "Approval in progress !";
        return result;
      })
      .catch((err) => {
        console.log(err);
        approveTrees.innerHTML = err.data.messgae.split(": ")[1];
      });
    aprv.wait().then((result) => {
      bePlanter.disabled = false;
      bePlanter.style.display = "block";
      approveTrees.disabled = true;
      approveTrees.style.display = "none";
    });
  };
  const mintCert = async () => {
    const eco = await ecoData();
    const bePlanter = document.getElementById("bePlanter");
    const mint = await eco
      .mintCertificate(dias, Date.now(), BigInt(dias.trees * 1e18), dias.location)
      .then((result) => {
        console.log(result);
        bePlanter.innerHTML = "Planting in progress !";
        return result;
      })
      .catch((err) => {
        console.log(err);
      });
    mint.wait().then((result) => {
      refreshUSDC();
      refreshNet();
      refreshTR33();
      toggle();
    });
  };
  const fillIn = async () => {
    let treeVal = await tree.balanceOf(client);
    const wordBox = document.getElementById("words");
    const maxer = document.getElementById("balance_maxer");
    const gaziNorth = document.getElementById("gazi-north");
    const gaziSouth = document.getElementById("gazi-south");
    const diasShow = document.getElementById("dias");
    const treeBalance = document.getElementById("treebalance");
    const bePlanter = document.getElementById("bePlanter");
    const approveTrees = document.getElementById("approveTrees");
    approveTrees.disabled = true;
    approveTrees.style.background = "#4c9071";
    bePlanter.style.background = "#badbe1";
    approveTrees.addEventListener("click", goApproveTrees);
    bePlanter.addEventListener("click", mintCert);
    bePlanter.disabled = true;
    treeBalance.addEventListener("keyup", onTrees);
    treeBalance.addEventListener("change", onTrees);
    maxer.innerHTML = "Max. " + (treeVal / 1e18).toFixed(0) + " TR33s";
    diasShow.innerHTML = JSON.stringify(dias);
    maxer.addEventListener("click", doMax);
    gaziNorth.addEventListener("click", setPlantation);
    gaziSouth.addEventListener("click", setPlantation);
    const nums = doRand();
    const phrase = words.names[nums[0]] + " " + words.verbs[nums[1]] + " " + words.adjectives[nums[2]] + " " + words.nouns[nums[3]];
    wordBox.innerHTML = "Your Tree Phrase : " + phrase;
  };
  try {
    // get garden contract

    console.log("planting trees");
    modalHead.innerHTML = "Plant Your Trees";
    modalBody.innerHTML = document.getElementById("plantTreesDef").innerHTML;
    const fill = await fillIn();
    modalFoot.innerHTML = "* Your data will be stored on the blockchain !";
    toggle();
  } catch {
    modalHead.innerHTML = "Please Sign In first";
    modalBody.innerHTML = "";
    modalFoot.innerHTML = "* Your have to be connected to the blockchain !";
    toggle();
  }
};
plantTrees.addEventListener("click", goPlantForm);

const log = async () => {
  console.log("logging user in...");
  profile_btn.innerHTML = "logging";
  const client = await signer.getAddress();
  const s0x = await s0xData();
  refreshNet();
  refreshUSDC();
  refreshTR33();
  refreshECO();

  // console.log(s0x);
  // ask contract about user
  const isU = await s0x
    .isU(client)
    .then((result) => {
      console.log(result, " :: RESULT");
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
  console.log("You are a user ? Response : ", isU);
  if (isU) {
    const client = await signer.getAddress();
    const role = await s0x
      .getRole(client)
      .then((result) => {
        console.log(Number(result._hex));
        return result;
      })
      .catch((err) => {
        console.log(err);
      });
    const name = await s0x
      .getName(client)
      .then((result) => {
        console.log(result);
        return result;
      })
      .catch((err) => {
        console.log(err);
      });
    if (Number(role._hex) === 99) {
      // user is admin
      console.log("admin");
      profile_btn.innerHTML = "@" + name;
    }
    if (Number(role._hex) === 88) {
      // user is producer
    }
    if (Number(role._hex) === 77) {
      // user is promoter
    }
    if (Number(role._hex) === 11) {
      // user is client
    }
    if (Number(role._hex) === 2) {
      // user is client
      const udata = await s0x
        .showUser(client)
        .then((result) => {
          console.log(result);
          return JSON.parse(result);
        })
        .catch((err) => {
          console.log(err);
        });
      profile_btn.removeEventListener("click", goProfile);
      profile_btn.addEventListener("click", viewProfile);
      profile_btn.innerHTML = "<img src='" + udata.avatar + "' id='uavt' />" + name;
    }
  } else {
    // is not a user
    console.log("sign up now");
    profile_btn.innerHTML = "account";
    actions.innerHTML = "Please Create an account !";
    profile_btn.removeEventListener("click", goProfile);
    profile_btn.addEventListener("click", doSignUp);
  }
};
const viewProfile = async (e) => {
  e.preventDefault();
  const s0x = await s0xData();
  const tree = await treeData();

  const client = await signer.getAddress();
  const name = await s0x
    .getName(client)
    .then((result) => {
      console.log(result);
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
  console.log("view profile !");
  modalHead.innerHTML = name + "'s Profile";
  modalBody.innerHTML = "";
  modalFoot.innerHTML = "Your data is saved on the Blockchain !";
  toggle();
};
const addUser = async (e) => {
  e.preventDefault();
  const s0x = await s0xData();
  const account = await signer.getAddress();
  console.log(String(account), `{"name":"${document.getElementById("su_name").value}","email":"${document.getElementById("su_email").value}","avatar":"${document.getElementById("su_avt").value}"}`);
  userData = await s0x
    .createUserAccount(`{"name":"${document.getElementById("su_name").value}","email":"${document.getElementById("su_email").value}","avatar":"${document.getElementById("su_avt").value}"}`, String(account), document.getElementById("su_name").value)
    .then((result) => {
      console.log(result);
      return result;
    })
    .catch((err) => {
      console.log(err);
    });
  userData.wait().then((result) => {
    console.log("finished");
    profile_btn.innerHTML = document.getElementById("su_name").value;
    profile_btn.removeEventListener("click", doSignUp);
    toggle();
  });
};
const user_preset = document.getElementById("user_avt");

const doSignUp = (e) => {
  modalHead.innerHTML = "SIGN UP FORM";
  modalBody.innerHTML = user_preset.innerHTML;
  const uploader = document.getElementById("uploader");
  const file = document.getElementById("file");
  const submitIpfs = document.getElementById("submitIpfs");
  const fileURL = document.getElementById("uavt_inp");
  const pusher = document.getElementById("pusher");
  modalFoot.innerHTML = "* Your data will be stored on the blockchain !";
  document.getElementById("signup_btn").addEventListener("click", addUser);
  toggle();
  file.addEventListener("change", captureFile);
  pusher.addEventListener("click", function () {
    file.click();
  });
};

let UpBuff;
const captureFile = (e) => {
  e.preventDefault();
  console.log("file captured", e.target.files[0]);
  const file = e.target.files[0];
  const reader = new window.FileReader();
  reader.readAsArrayBuffer(file);
  reader.onloadend = () => {
    const buffer = reader.result;
    UpBuff = buffer;
  };
  submitIpfs.innerHTML = file.name.slice(0, 3) + ".." + file.name.slice(file.name.length - 4, file.name.length) + ' <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-upload-fill" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8 0a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 4.095 0 5.555 0 7.318 0 9.366 1.708 11 3.781 11H7.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11h4.188C14.502 11 16 9.57 16 7.773c0-1.636-1.242-2.969-2.834-3.194C12.923 1.999 10.69 0 8 0zm-.5 14.5V11h1v3.5a.5.5 0 0 1-1 0z"/></svg>';
  // uploader.removeEventListener("submit",copyToClip);
  submitIpfs.addEventListener("click", uploadAFile);
};
const uploadAFile = async (e) => {
  e.preventDefault();
  console.log("pushing to ipfs");
  const result = await cliento.add(UpBuff);
  console.log("Ipfs Result", result);
  const submitIpfs = document.getElementById("submitIpfs");
  submitIpfs.innerHTML =
    result.path.slice(0, 2) +
    "..." +
    result.path.slice(result.path.length - 2, result.path.length) +
    ' <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-check" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"/><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/></svg>';
  submitIpfs.value = result.path;
  const suAvt = document.getElementById("su_avt");
  const avt = document.getElementById("avt");
  suAvt.value = "https://ipfs.io/ipfs/" + result.path;
  submitIpfs.removeEventListener("click", uploadAFile);
  submitIpfs.addEventListener("click", copyToClip);
  // usimg.src = "https://ipfs.io/ipfs/" + result.path;
  avt.src = "https://ipfs.io/ipfs/" + result.path;
};
const copyToClip = (e) => {
  e.preventDefault();
  // console.log(fileURL.value);
  navigator.clipboard.writeText("http://ipfs.io/ipfs/" + fileURL.value).then(
    function () {
      console.log("copied to clipboard !");
    },
    function (err) {
      console.error("could not copy !", err);
    }
  );
  submitIpfs.removeEventListener("click", copyToClip);
};

const submitUserForm = async (e) => {
  e.preventDefault();
  // const s0x = await s0xCon();
  console.log(e.target);
  const obj = {
    username: uname.value,
    usermail: umail.value,
    usertel: unum.value,
    usertwt: utwt.value,
    userstatus: usts.value,
    useravt: uavt.value,
  };
  console.log(obj);
  // const makeU = await s0x.makeU(JSON.stringify(obj));
  // push object & make user
};
// unstoppable login tool
window.login = async () => {
  try {
    const authorization = await uauth.loginWithPopup();

    console.log(authorization);
  } catch (error) {
    console.error(error);
  }
};
const web3init = async () => {
  const isMetaMaskInstalled = () => {
    //Have to check the ethereum binding on the window object to see if it's installed
    const { ethereum } = window;
    return Boolean(ethereum && ethereum.isMetaMask);
  };
  const clickInstall = (e) => {
    e.preventDefault();
    alert("You are being redirected to the official download of Metamask.io ... Please Follow their installation instructions.");
    window.open("https://metamask.io");
  };
  const MetaMaskClientCheck = () => {
    //Now we check to see if MetaMask is installed
    if (!isMetaMaskInstalled()) {
      //If it isn't installed we ask the user to click to install it
      profile_btn.innerText = "Install Metamask!";
      profile_btn.addEventListener("click", clickInstall);
    } else {
      //If it is installed we change our button text
      profile_btn.innerText = "Connect";
      profile_btn.addEventListener("click", onClickConnect);
    }
  };
  MetaMaskClientCheck();
};
// IMPRTANT INITIAL FUNCTION CALL
web3init();
// IMPORTANT FUNCTION WEB3INIT DO NOT EDIT END //
